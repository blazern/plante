// Mocks generated by Mockito 5.0.15 from annotations
// in plante/test/common_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:io' as _i58;
import 'dart:typed_data' as _i21;

import 'package:flutter/material.dart' as _i57;
import 'package:flutter/services.dart' as _i61;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i39;
import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart'
    as _i4;
import 'package:http/http.dart' as _i33;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openfoodfacts/model/OcrIngredientsResult.dart' as _i7;
import 'package:openfoodfacts/model/SearchResult.dart' as _i5;
import 'package:openfoodfacts/openfoodfacts.dart' as _i6;
import 'package:openfoodfacts/utils/ProductListQueryConfiguration.dart' as _i45;
import 'package:plante/base/base.dart' as _i34;
import 'package:plante/base/pair.dart' as _i48;
import 'package:plante/base/permissions_manager.dart' as _i55;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/base/size_int.dart' as _i60;
import 'package:plante/lang/sys_lang_code_holder.dart' as _i75;
import 'package:plante/lang/user_langs_manager.dart' as _i76;
import 'package:plante/lang/user_langs_manager_error.dart' as _i77;
import 'package:plante/location/geolocator_wrapper.dart' as _i36;
import 'package:plante/location/ip_location_provider.dart' as _i40;
import 'package:plante/location/user_location_manager.dart' as _i42;
import 'package:plante/model/coord.dart' as _i15;
import 'package:plante/model/coords_bounds.dart' as _i30;
import 'package:plante/model/lang_code.dart' as _i24;
import 'package:plante/model/product.dart' as _i63;
import 'package:plante/model/shop.dart' as _i13;
import 'package:plante/model/shop_product_range.dart' as _i70;
import 'package:plante/model/shop_type.dart' as _i71;
import 'package:plante/model/user_langs.dart' as _i8;
import 'package:plante/model/user_params.dart' as _i19;
import 'package:plante/model/user_params_controller.dart' as _i78;
import 'package:plante/model/veg_status.dart' as _i23;
import 'package:plante/model/viewed_products_storage.dart' as _i79;
import 'package:plante/outside/backend/backend.dart' as _i18;
import 'package:plante/outside/backend/backend_error.dart' as _i20;
import 'package:plante/outside/backend/backend_product.dart' as _i65;
import 'package:plante/outside/backend/backend_products_at_shop.dart' as _i26;
import 'package:plante/outside/backend/backend_response.dart' as _i3;
import 'package:plante/outside/backend/backend_shop.dart' as _i28;
import 'package:plante/outside/backend/mobile_app_config.dart' as _i25;
import 'package:plante/outside/backend/mobile_app_config_manager.dart' as _i43;
import 'package:plante/outside/backend/product_at_shop_source.dart' as _i32;
import 'package:plante/outside/backend/product_presence_vote_result.dart'
    as _i31;
import 'package:plante/outside/backend/requested_products_result.dart' as _i22;
import 'package:plante/outside/backend/shops_in_bounds_response.dart' as _i29;
import 'package:plante/outside/identity/apple_authorizer.dart' as _i16;
import 'package:plante/outside/identity/apple_user.dart' as _i17;
import 'package:plante/outside/identity/google_authorizer.dart' as _i37;
import 'package:plante/outside/identity/google_user.dart' as _i38;
import 'package:plante/outside/map/address_obtainer.dart' as _i9;
import 'package:plante/outside/map/directions_manager.dart' as _i35;
import 'package:plante/outside/map/osm/open_street_map.dart' as _i12;
import 'package:plante/outside/map/osm/osm_address.dart' as _i14;
import 'package:plante/outside/map/osm/osm_nominatim.dart' as _i49;
import 'package:plante/outside/map/osm/osm_overpass.dart' as _i51;
import 'package:plante/outside/map/osm/osm_road.dart' as _i53;
import 'package:plante/outside/map/osm/osm_search_result.dart' as _i50;
import 'package:plante/outside/map/osm/osm_searcher.dart' as _i54;
import 'package:plante/outside/map/osm/osm_shop.dart' as _i52;
import 'package:plante/outside/map/osm/osm_short_address.dart' as _i11;
import 'package:plante/outside/map/osm/osm_uid.dart' as _i27;
import 'package:plante/outside/map/roads_manager.dart' as _i67;
import 'package:plante/outside/map/shops_manager.dart' as _i68;
import 'package:plante/outside/map/shops_manager_types.dart' as _i69;
import 'package:plante/outside/off/off_api.dart' as _i44;
import 'package:plante/outside/off/off_shop.dart' as _i46;
import 'package:plante/outside/off/off_shops_manager.dart' as _i47;
import 'package:plante/outside/products/products_manager.dart' as _i62;
import 'package:plante/outside/products/products_manager_error.dart' as _i64;
import 'package:plante/outside/products/products_obtainer.dart' as _i66;
import 'package:plante/outside/products/suggestions/suggested_products_manager.dart'
    as _i72;
import 'package:plante/outside/products/suggestions/suggestion_type.dart'
    as _i74;
import 'package:plante/outside/products/suggestions/suggestions_for_shop.dart'
    as _i73;
import 'package:plante/ui/map/latest_camera_pos_storage.dart' as _i41;
import 'package:plante/ui/photos/photo_requester.dart' as _i59;
import 'package:plante/ui/photos/photos_taker.dart' as _i56;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResult_0<OK, ERR> extends _i1.Fake implements _i2.Result<OK, ERR> {}

class _FakeBackendResponse_1 extends _i1.Fake implements _i3.BackendResponse {}

class _FakeLatLngBounds_2 extends _i1.Fake implements _i4.LatLngBounds {}

class _FakeScreenCoordinate_3 extends _i1.Fake implements _i4.ScreenCoordinate {
}

class _FakeLatLng_4 extends _i1.Fake implements _i4.LatLng {}

class _FakeSearchResult_5 extends _i1.Fake implements _i5.SearchResult {}

class _FakeStatus_6 extends _i1.Fake implements _i6.Status {}

class _FakeOcrIngredientsResult_7 extends _i1.Fake
    implements _i7.OcrIngredientsResult {}

class _FakeUserLangs_8 extends _i1.Fake implements _i8.UserLangs {}

/// A class which mocks [AddressObtainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddressObtainer extends _i1.Mock implements _i9.AddressObtainer {
  MockAddressObtainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Result<_i11.OsmShortAddress, _i12.OpenStreetMapError>>
      addressOfShop(_i13.Shop? shop, {String? langCode}) => (super.noSuchMethod(
          Invocation.method(#addressOfShop, [shop], {#langCode: langCode}),
          returnValue:
              Future<_i2.Result<_i11.OsmShortAddress, _i12.OpenStreetMapError>>.value(
                  _FakeResult_0<_i11.OsmShortAddress, _i12.OpenStreetMapError>())) as _i10
          .Future<_i2.Result<_i11.OsmShortAddress, _i12.OpenStreetMapError>>);
  @override
  _i10.Future<_i2.Result<_i14.OsmAddress, _i12.OpenStreetMapError>> addressOfCoords(
          _i15.Coord? coords,
          {String? langCode}) =>
      (super.noSuchMethod(
          Invocation.method(#addressOfCoords, [coords], {#langCode: langCode}),
          returnValue: Future<
                  _i2.Result<_i14.OsmAddress, _i12.OpenStreetMapError>>.value(
              _FakeResult_0<_i14.OsmAddress, _i12.OpenStreetMapError>())) as _i10
          .Future<_i2.Result<_i14.OsmAddress, _i12.OpenStreetMapError>>);
  @override
  _i10.Future<_i2.Result<_i11.OsmShortAddress, _i12.OpenStreetMapError>>
      shortAddressOfCoords(_i15.Coord? coords) =>
          (super.noSuchMethod(Invocation.method(#shortAddressOfCoords, [coords]),
              returnValue:
                  Future<_i2.Result<_i11.OsmShortAddress, _i12.OpenStreetMapError>>.value(
                      _FakeResult_0<_i11.OsmShortAddress,
                          _i12.OpenStreetMapError>())) as _i10
              .Future<_i2.Result<_i11.OsmShortAddress, _i12.OpenStreetMapError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppleAuthorizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppleAuthorizer extends _i1.Mock implements _i16.AppleAuthorizer {
  MockAppleAuthorizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i17.AppleUser?> auth() =>
      (super.noSuchMethod(Invocation.method(#auth, []),
              returnValue: Future<_i17.AppleUser?>.value())
          as _i10.Future<_i17.AppleUser?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Backend].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackend extends _i1.Mock implements _i18.Backend {
  MockBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i18.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i18.BackendObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<_i2.Result<_i19.UserParams, _i20.BackendError>> loginOrRegister(
          {String? googleIdToken, String? appleAuthorizationCode}) =>
      (super.noSuchMethod(
              Invocation.method(#loginOrRegister, [], {
                #googleIdToken: googleIdToken,
                #appleAuthorizationCode: appleAuthorizationCode
              }),
              returnValue:
                  Future<_i2.Result<_i19.UserParams, _i20.BackendError>>.value(
                      _FakeResult_0<_i19.UserParams, _i20.BackendError>()))
          as _i10.Future<_i2.Result<_i19.UserParams, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<bool, _i20.BackendError>> updateUserParams(
          _i19.UserParams? userParams,
          {String? backendClientTokenOverride}) =>
      (super.noSuchMethod(
              Invocation.method(#updateUserParams, [userParams],
                  {#backendClientTokenOverride: backendClientTokenOverride}),
              returnValue: Future<_i2.Result<bool, _i20.BackendError>>.value(
                  _FakeResult_0<bool, _i20.BackendError>()))
          as _i10.Future<_i2.Result<bool, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<String, _i20.BackendError>> updateUserAvatar(
          _i21.Uint8List? avatarBytes) =>
      (super.noSuchMethod(Invocation.method(#updateUserAvatar, [avatarBytes]),
              returnValue: Future<_i2.Result<String, _i20.BackendError>>.value(
                  _FakeResult_0<String, _i20.BackendError>()))
          as _i10.Future<_i2.Result<String, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<_i2.None, _i20.BackendError>> deleteUserAvatar() =>
      (super.noSuchMethod(Invocation.method(#deleteUserAvatar, []),
          returnValue: Future<_i2.Result<_i2.None, _i20.BackendError>>.value(
              _FakeResult_0<_i2.None, _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i2.None, _i20.BackendError>>);
  @override
  Uri? userAvatarUrl(_i19.UserParams? user) =>
      (super.noSuchMethod(Invocation.method(#userAvatarUrl, [user])) as Uri?);
  @override
  _i10.Future<_i2.Result<_i22.RequestedProductsResult, _i20.BackendError>>
      requestProducts(List<String>? barcodes, int? page) => (super.noSuchMethod(
          Invocation.method(#requestProducts, [barcodes, page]),
          returnValue: Future<_i2.Result<_i22.RequestedProductsResult, _i20.BackendError>>.value(
              _FakeResult_0<_i22.RequestedProductsResult,
                  _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i22.RequestedProductsResult, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<_i2.None, _i20.BackendError>> createUpdateProduct(
          String? barcode,
          {_i23.VegStatus? veganStatus,
          List<_i24.LangCode>? changedLangs}) =>
      (super.noSuchMethod(
          Invocation.method(#createUpdateProduct, [barcode],
              {#veganStatus: veganStatus, #changedLangs: changedLangs}),
          returnValue: Future<_i2.Result<_i2.None, _i20.BackendError>>.value(
              _FakeResult_0<_i2.None, _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i2.None, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<_i2.None, _i20.BackendError>> sendReport(
          String? barcode, String? reportText) =>
      (super.noSuchMethod(Invocation.method(#sendReport, [barcode, reportText]),
          returnValue: Future<_i2.Result<_i2.None, _i20.BackendError>>.value(
              _FakeResult_0<_i2.None, _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i2.None, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<_i2.None, _i20.BackendError>> sendProductScan(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#sendProductScan, [barcode]),
          returnValue: Future<_i2.Result<_i2.None, _i20.BackendError>>.value(
              _FakeResult_0<_i2.None, _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i2.None, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<_i25.MobileAppConfig, _i20.BackendError>>
      mobileAppConfig() => (super.noSuchMethod(
          Invocation.method(#mobileAppConfig, []),
          returnValue: Future<
                  _i2.Result<_i25.MobileAppConfig, _i20.BackendError>>.value(
              _FakeResult_0<_i25.MobileAppConfig, _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i25.MobileAppConfig, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<List<_i26.BackendProductsAtShop>, _i20.BackendError>>
      requestProductsAtShops(Iterable<_i27.OsmUID>? osmUIDs) =>
          (super.noSuchMethod(Invocation.method(#requestProductsAtShops, [osmUIDs]),
              returnValue:
                  Future<_i2.Result<List<_i26.BackendProductsAtShop>, _i20.BackendError>>.value(
                      _FakeResult_0<List<_i26.BackendProductsAtShop>,
                          _i20.BackendError>())) as _i10
              .Future<_i2.Result<List<_i26.BackendProductsAtShop>, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<List<_i28.BackendShop>, _i20.BackendError>>
      requestShopsByOsmUIDs(Iterable<_i27.OsmUID>? osmUIDs) => (super.noSuchMethod(
          Invocation.method(#requestShopsByOsmUIDs, [osmUIDs]),
          returnValue: Future<
                  _i2.Result<List<_i28.BackendShop>, _i20.BackendError>>.value(
              _FakeResult_0<List<_i28.BackendShop>, _i20.BackendError>())) as _i10
          .Future<_i2.Result<List<_i28.BackendShop>, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<_i29.ShopsInBoundsResponse, _i20.BackendError>>
      requestShopsWithin(_i30.CoordsBounds? bounds) => (super.noSuchMethod(
          Invocation.method(#requestShopsWithin, [bounds]),
          returnValue:
              Future<_i2.Result<_i29.ShopsInBoundsResponse, _i20.BackendError>>.value(
                  _FakeResult_0<_i29.ShopsInBoundsResponse,
                      _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i29.ShopsInBoundsResponse, _i20.BackendError>>);
  @override
  _i10.Future<
      _i2.Result<_i31.ProductPresenceVoteResult, _i20.BackendError>> productPresenceVote(
          String? barcode, _i27.OsmUID? osmUID, bool? positive) =>
      (super.noSuchMethod(
          Invocation.method(#productPresenceVote, [barcode, osmUID, positive]),
          returnValue:
              Future<_i2.Result<_i31.ProductPresenceVoteResult, _i20.BackendError>>.value(
                  _FakeResult_0<_i31.ProductPresenceVoteResult, _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i31.ProductPresenceVoteResult, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<_i2.None, _i20.BackendError>> putProductToShop(
          String? barcode, _i13.Shop? shop, _i32.ProductAtShopSource? source) =>
      (super.noSuchMethod(
          Invocation.method(#putProductToShop, [barcode, shop, source]),
          returnValue: Future<_i2.Result<_i2.None, _i20.BackendError>>.value(
              _FakeResult_0<_i2.None, _i20.BackendError>())) as _i10
          .Future<_i2.Result<_i2.None, _i20.BackendError>>);
  @override
  _i10.Future<_i2.Result<_i28.BackendShop, _i20.BackendError>> createShop(
          {String? name, _i15.Coord? coord, String? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coord: coord, #type: type}),
              returnValue:
                  Future<_i2.Result<_i28.BackendShop, _i20.BackendError>>.value(
                      _FakeResult_0<_i28.BackendShop, _i20.BackendError>()))
          as _i10.Future<_i2.Result<_i28.BackendShop, _i20.BackendError>>);
  @override
  _i10.Future<Map<String, String>> authHeaders(
          {String? backendClientTokenOverride}) =>
      (super.noSuchMethod(
              Invocation.method(#authHeaders, [],
                  {#backendClientTokenOverride: backendClientTokenOverride}),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i10.Future<Map<String, String>>);
  @override
  _i10.Future<_i3.BackendResponse> customGet(String? path,
          [Map<String, dynamic>? queryParams, Map<String, String>? headers]) =>
      (super.noSuchMethod(
              Invocation.method(#customGet, [path, queryParams, headers]),
              returnValue:
                  Future<_i3.BackendResponse>.value(_FakeBackendResponse_1()))
          as _i10.Future<_i3.BackendResponse>);
  @override
  _i10.Future<R> customRequest<R extends _i33.BaseRequest>(
          String? path, _i34.ArgResCallback<Uri, R>? createRequest,
          {Map<String, dynamic>? queryParams, Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#customRequest, [path, createRequest],
              {#queryParams: queryParams, #headers: headers}),
          returnValue: Future<R>.value(null)) as _i10.Future<R>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BackendObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackendObserver extends _i1.Mock implements _i18.BackendObserver {
  MockBackendObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onBackendError(_i20.BackendError? error) =>
      super.noSuchMethod(Invocation.method(#onBackendError, [error]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DirectionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectionsManager extends _i1.Mock implements _i35.DirectionsManager {
  MockDirectionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<bool> areDirectionsAvailable() =>
      (super.noSuchMethod(Invocation.method(#areDirectionsAvailable, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  void direct(_i15.Coord? destination, String? destinationTitle) => super
      .noSuchMethod(Invocation.method(#direct, [destination, destinationTitle]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GeolocatorWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorWrapper extends _i1.Mock implements _i36.GeolocatorWrapper {
  MockGeolocatorWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i15.Coord?> getLastKnownPosition() => (super.noSuchMethod(
      Invocation.method(#getLastKnownPosition, []),
      returnValue: Future<_i15.Coord?>.value()) as _i10.Future<_i15.Coord?>);
  @override
  _i10.Future<_i15.Coord?> getCurrentPosition() => (super.noSuchMethod(
      Invocation.method(#getCurrentPosition, []),
      returnValue: Future<_i15.Coord?>.value()) as _i10.Future<_i15.Coord?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleAuthorizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthorizer extends _i1.Mock implements _i37.GoogleAuthorizer {
  MockGoogleAuthorizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i38.GoogleUser?> auth() =>
      (super.noSuchMethod(Invocation.method(#auth, []),
              returnValue: Future<_i38.GoogleUser?>.value())
          as _i10.Future<_i38.GoogleUser?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i39.GoogleMapController {
  MockGoogleMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get mapId =>
      (super.noSuchMethod(Invocation.getter(#mapId), returnValue: 0) as int);
  @override
  _i10.Future<void> clearTileCache(_i4.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(Invocation.method(#clearTileCache, [tileOverlayId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> animateCamera(_i4.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#animateCamera, [cameraUpdate]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> moveCamera(_i4.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#moveCamera, [cameraUpdate]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> setMapStyle(String? mapStyle) => (super.noSuchMethod(
      Invocation.method(#setMapStyle, [mapStyle]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<_i4.LatLngBounds> getVisibleRegion() => (super.noSuchMethod(
          Invocation.method(#getVisibleRegion, []),
          returnValue: Future<_i4.LatLngBounds>.value(_FakeLatLngBounds_2()))
      as _i10.Future<_i4.LatLngBounds>);
  @override
  _i10.Future<_i4.ScreenCoordinate> getScreenCoordinate(_i4.LatLng? latLng) =>
      (super.noSuchMethod(Invocation.method(#getScreenCoordinate, [latLng]),
              returnValue:
                  Future<_i4.ScreenCoordinate>.value(_FakeScreenCoordinate_3()))
          as _i10.Future<_i4.ScreenCoordinate>);
  @override
  _i10.Future<_i4.LatLng> getLatLng(_i4.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(Invocation.method(#getLatLng, [screenCoordinate]),
              returnValue: Future<_i4.LatLng>.value(_FakeLatLng_4()))
          as _i10.Future<_i4.LatLng>);
  @override
  _i10.Future<void> showMarkerInfoWindow(_i4.MarkerId? markerId) =>
      (super.noSuchMethod(Invocation.method(#showMarkerInfoWindow, [markerId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> hideMarkerInfoWindow(_i4.MarkerId? markerId) =>
      (super.noSuchMethod(Invocation.method(#hideMarkerInfoWindow, [markerId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<bool> isMarkerInfoWindowShown(_i4.MarkerId? markerId) => (super
      .noSuchMethod(Invocation.method(#isMarkerInfoWindowShown, [markerId]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<double> getZoomLevel() =>
      (super.noSuchMethod(Invocation.method(#getZoomLevel, []),
          returnValue: Future<double>.value(0.0)) as _i10.Future<double>);
  @override
  _i10.Future<_i21.Uint8List?> takeSnapshot() =>
      (super.noSuchMethod(Invocation.method(#takeSnapshot, []),
              returnValue: Future<_i21.Uint8List?>.value())
          as _i10.Future<_i21.Uint8List?>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IpLocationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIpLocationProvider extends _i1.Mock
    implements _i40.IpLocationProvider {
  MockIpLocationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i15.Coord?> positionByIP() => (super.noSuchMethod(
      Invocation.method(#positionByIP, []),
      returnValue: Future<_i15.Coord?>.value()) as _i10.Future<_i15.Coord?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LatestCameraPosStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLatestCameraPosStorage extends _i1.Mock
    implements _i41.LatestCameraPosStorage {
  MockLatestCameraPosStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> set(_i15.Coord? pos) => (super.noSuchMethod(
      Invocation.method(#set, [pos]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<_i15.Coord?> get() => (super.noSuchMethod(
      Invocation.method(#get, []),
      returnValue: Future<_i15.Coord?>.value()) as _i10.Future<_i15.Coord?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserLocationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocationManager extends _i1.Mock
    implements _i42.UserLocationManager {
  MockUserLocationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i15.Coord?> lastKnownPosition() => (super.noSuchMethod(
      Invocation.method(#lastKnownPosition, []),
      returnValue: Future<_i15.Coord?>.value()) as _i10.Future<_i15.Coord?>);
  @override
  _i10.Future<_i15.Coord?> currentPosition() => (super.noSuchMethod(
      Invocation.method(#currentPosition, []),
      returnValue: Future<_i15.Coord?>.value()) as _i10.Future<_i15.Coord?>);
  @override
  void callWhenLastPositionKnown(_i34.ArgCallback<_i15.Coord>? callback) =>
      super.noSuchMethod(
          Invocation.method(#callWhenLastPositionKnown, [callback]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MobileAppConfigManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMobileAppConfigManager extends _i1.Mock
    implements _i43.MobileAppConfigManager {
  MockMobileAppConfigManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> get initFuture =>
      (super.noSuchMethod(Invocation.getter(#initFuture),
          returnValue: Future<void>.value()) as _i10.Future<void>);
  @override
  void onUserParamsUpdate(_i19.UserParams? userParams) =>
      super.noSuchMethod(Invocation.method(#onUserParamsUpdate, [userParams]),
          returnValueForMissingStub: null);
  @override
  void addObserver(_i43.MobileAppConfigManagerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i43.MobileAppConfigManagerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i25.MobileAppConfig?> getConfig() =>
      (super.noSuchMethod(Invocation.method(#getConfig, []),
              returnValue: Future<_i25.MobileAppConfig?>.value())
          as _i10.Future<_i25.MobileAppConfig?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OffApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffApi extends _i1.Mock implements _i44.OffApi {
  MockOffApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i5.SearchResult> getProductList(
          _i45.ProductListQueryConfiguration? configuration) =>
      (super.noSuchMethod(Invocation.method(#getProductList, [configuration]),
              returnValue:
                  Future<_i5.SearchResult>.value(_FakeSearchResult_5()))
          as _i10.Future<_i5.SearchResult>);
  @override
  _i10.Future<_i6.Status> saveProduct(_i6.User? user, _i6.Product? product) =>
      (super.noSuchMethod(Invocation.method(#saveProduct, [user, product]),
              returnValue: Future<_i6.Status>.value(_FakeStatus_6()))
          as _i10.Future<_i6.Status>);
  @override
  _i10.Future<_i6.Status> addProductImage(
          _i6.User? user, _i6.SendImage? image) =>
      (super.noSuchMethod(Invocation.method(#addProductImage, [user, image]),
              returnValue: Future<_i6.Status>.value(_FakeStatus_6()))
          as _i10.Future<_i6.Status>);
  @override
  _i10.Future<_i7.OcrIngredientsResult> extractIngredients(_i6.User? user,
          String? barcode, _i6.OpenFoodFactsLanguage? language) =>
      (super.noSuchMethod(
              Invocation.method(#extractIngredients, [user, barcode, language]),
              returnValue: Future<_i7.OcrIngredientsResult>.value(
                  _FakeOcrIngredientsResult_7()))
          as _i10.Future<_i7.OcrIngredientsResult>);
  @override
  _i10.Future<_i5.SearchResult> searchProducts(
          _i6.ProductSearchQueryConfiguration? configuration) =>
      (super.noSuchMethod(Invocation.method(#searchProducts, [configuration]),
              returnValue:
                  Future<_i5.SearchResult>.value(_FakeSearchResult_5()))
          as _i10.Future<_i5.SearchResult>);
  @override
  _i10.Future<_i2.Result<String, _i44.OffRestApiError>> getShopsJsonForCountry(
          String? countryIso) =>
      (super.noSuchMethod(
          Invocation.method(#getShopsJsonForCountry, [countryIso]),
          returnValue: Future<_i2.Result<String, _i44.OffRestApiError>>.value(
              _FakeResult_0<String, _i44.OffRestApiError>())) as _i10
          .Future<_i2.Result<String, _i44.OffRestApiError>>);
  @override
  _i10.Future<_i2.Result<List<String>, _i44.OffRestApiError>>
      getBarcodesVeganByIngredients(
              _i46.OffShop? shop, List<String>? productsCategories) =>
          (super.noSuchMethod(
              Invocation.method(
                  #getBarcodesVeganByIngredients, [shop, productsCategories]),
              returnValue:
                  Future<_i2.Result<List<String>, _i44.OffRestApiError>>.value(
                      _FakeResult_0<List<String>, _i44.OffRestApiError>())) as _i10
              .Future<_i2.Result<List<String>, _i44.OffRestApiError>>);
  @override
  _i10.Future<_i2.Result<List<String>, _i44.OffRestApiError>>
      getBarcodesVeganByLabel(_i46.OffShop? shop) => (super.noSuchMethod(
              Invocation.method(#getBarcodesVeganByLabel, [shop]),
              returnValue:
                  Future<_i2.Result<List<String>, _i44.OffRestApiError>>.value(
                      _FakeResult_0<List<String>, _i44.OffRestApiError>()))
          as _i10.Future<_i2.Result<List<String>, _i44.OffRestApiError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OffShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffShopsManager extends _i1.Mock implements _i47.OffShopsManager {
  MockOffShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i10.Future<_i2.Result<_i46.OffShop?, _i47.OffShopsManagerError>>
      findOffShopByName(String? name, String? countryCode) => (super.noSuchMethod(
          Invocation.method(#findOffShopByName, [name, countryCode]),
          returnValue: Future<
                  _i2.Result<_i46.OffShop?, _i47.OffShopsManagerError>>.value(
              _FakeResult_0<_i46.OffShop?, _i47.OffShopsManagerError>())) as _i10
          .Future<_i2.Result<_i46.OffShop?, _i47.OffShopsManagerError>>);
  @override
  _i10.Future<_i2.Result<List<_i46.OffShop>, _i47.OffShopsManagerError>>
      fetchOffShops(String? countryCode) => (super.noSuchMethod(
          Invocation.method(#fetchOffShops, [countryCode]),
          returnValue:
              Future<_i2.Result<List<_i46.OffShop>, _i47.OffShopsManagerError>>.value(
                  _FakeResult_0<List<_i46.OffShop>,
                      _i47.OffShopsManagerError>())) as _i10
          .Future<_i2.Result<List<_i46.OffShop>, _i47.OffShopsManagerError>>);
  @override
  _i10.Stream<_i2.Result<_i48.Pair<String, List<String>>, _i47.OffShopsManagerError>>
      fetchVeganBarcodes(Set<String>? shopsNames, String? countryCode) => (super.noSuchMethod(
              Invocation.method(#fetchVeganBarcodes, [shopsNames, countryCode]),
              returnValue:
                  Stream<_i2.Result<_i48.Pair<String, List<String>>, _i47.OffShopsManagerError>>.empty())
          as _i10.Stream<
              _i2.Result<_i48.Pair<String, List<String>>,
                  _i47.OffShopsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OsmNominatim].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmNominatim extends _i1.Mock implements _i49.OsmNominatim {
  MockOsmNominatim() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Result<_i14.OsmAddress, _i12.OpenStreetMapError>> fetchAddress(
          double? lat, double? lon, {String? langCode}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchAddress, [lat, lon], {#langCode: langCode}),
              returnValue: Future<
                      _i2.Result<_i14.OsmAddress, _i12.OpenStreetMapError>>.value(
                  _FakeResult_0<_i14.OsmAddress, _i12.OpenStreetMapError>()))
          as _i10.Future<_i2.Result<_i14.OsmAddress, _i12.OpenStreetMapError>>);
  @override
  _i10.Future<_i2.Result<_i50.OsmSearchResult, _i12.OpenStreetMapError>> search(
          String? country, String? city, String? query) =>
      (super.noSuchMethod(Invocation.method(#search, [country, city, query]),
          returnValue:
              Future<_i2.Result<_i50.OsmSearchResult, _i12.OpenStreetMapError>>.value(
                  _FakeResult_0<_i50.OsmSearchResult,
                      _i12.OpenStreetMapError>())) as _i10
          .Future<_i2.Result<_i50.OsmSearchResult, _i12.OpenStreetMapError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OsmOverpass].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmOverpass extends _i1.Mock implements _i51.OsmOverpass {
  MockOsmOverpass() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get urls => (super.noSuchMethod(Invocation.getter(#urls),
      returnValue: <String, String>{}) as Map<String, String>);
  @override
  int now() =>
      (super.noSuchMethod(Invocation.method(#now, []), returnValue: 0) as int);
  @override
  _i10.Future<_i2.Result<List<_i52.OsmShop>, _i12.OpenStreetMapError>> fetchShops(
          {_i30.CoordsBounds? bounds, Iterable<_i27.OsmUID>? osmUIDs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #fetchShops, [], {#bounds: bounds, #osmUIDs: osmUIDs}),
          returnValue:
              Future<_i2.Result<List<_i52.OsmShop>, _i12.OpenStreetMapError>>.value(
                  _FakeResult_0<List<_i52.OsmShop>, _i12.OpenStreetMapError>())) as _i10
          .Future<_i2.Result<List<_i52.OsmShop>, _i12.OpenStreetMapError>>);
  @override
  _i10.Future<_i2.Result<List<_i53.OsmRoad>, _i12.OpenStreetMapError>>
      fetchRoads(_i30.CoordsBounds? bounds) => (super.noSuchMethod(
          Invocation.method(#fetchRoads, [bounds]),
          returnValue:
              Future<_i2.Result<List<_i53.OsmRoad>, _i12.OpenStreetMapError>>.value(
                  _FakeResult_0<List<_i53.OsmRoad>,
                      _i12.OpenStreetMapError>())) as _i10
          .Future<_i2.Result<List<_i53.OsmRoad>, _i12.OpenStreetMapError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OsmSearcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmSearcher extends _i1.Mock implements _i54.OsmSearcher {
  MockOsmSearcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Result<_i50.OsmSearchResult, _i12.OpenStreetMapError>> search(
          String? country, String? city, String? query) =>
      (super.noSuchMethod(Invocation.method(#search, [country, city, query]),
          returnValue:
              Future<_i2.Result<_i50.OsmSearchResult, _i12.OpenStreetMapError>>.value(
                  _FakeResult_0<_i50.OsmSearchResult,
                      _i12.OpenStreetMapError>())) as _i10
          .Future<_i2.Result<_i50.OsmSearchResult, _i12.OpenStreetMapError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PermissionsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsManager extends _i1.Mock
    implements _i55.PermissionsManager {
  MockPermissionsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i55.PermissionState> status(_i55.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#status, [permission]),
              returnValue: Future<_i55.PermissionState>.value(
                  _i55.PermissionState.granted))
          as _i10.Future<_i55.PermissionState>);
  @override
  _i10.Future<_i55.PermissionState> request(_i55.PermissionKind? permission) =>
      (super.noSuchMethod(Invocation.method(#request, [permission]),
              returnValue: Future<_i55.PermissionState>.value(
                  _i55.PermissionState.granted))
          as _i10.Future<_i55.PermissionState>);
  @override
  _i10.Future<bool> openAppSettings() =>
      (super.noSuchMethod(Invocation.method(#openAppSettings, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PhotosTaker].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotosTaker extends _i1.Mock implements _i56.PhotosTaker {
  MockPhotosTaker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<Uri?> takeAndCropPhoto(_i57.BuildContext? context,
          _i58.Directory? outFolder, _i59.PhotoRequester? requester,
          {bool? cropCircle = false,
          _i60.SizeInt? targetSize,
          _i60.SizeInt? minSize}) =>
      (super.noSuchMethod(
          Invocation.method(#takeAndCropPhoto, [
            context,
            outFolder,
            requester
          ], {
            #cropCircle: cropCircle,
            #targetSize: targetSize,
            #minSize: minSize
          }),
          returnValue: Future<Uri?>.value()) as _i10.Future<Uri?>);
  @override
  _i10.Future<Uri?> selectAndCropPhoto(_i57.BuildContext? context,
          _i58.Directory? outFolder, _i59.PhotoRequester? requester,
          {bool? cropCircle = false,
          _i60.SizeInt? targetSize,
          _i60.SizeInt? minSize}) =>
      (super.noSuchMethod(
          Invocation.method(#selectAndCropPhoto, [
            context,
            outFolder,
            requester
          ], {
            #cropCircle: cropCircle,
            #targetSize: targetSize,
            #minSize: minSize
          }),
          returnValue: Future<Uri?>.value()) as _i10.Future<Uri?>);
  @override
  _i10.Future<Uri?> cropPhoto(String? photoPath, _i57.BuildContext? context,
          _i58.Directory? outFolder,
          {bool? cropCircle = false,
          _i60.SizeInt? targetSize,
          _i60.SizeInt? minSize}) =>
      (super.noSuchMethod(
          Invocation.method(#cropPhoto, [
            photoPath,
            context,
            outFolder
          ], {
            #cropCircle: cropCircle,
            #targetSize: targetSize,
            #minSize: minSize
          }),
          returnValue: Future<Uri?>.value()) as _i10.Future<Uri?>);
  @override
  _i10.Future<_i2.Result<Uri, _i61.PlatformException>?> retrieveLostPhoto(
          _i59.PhotoRequester? requester) =>
      (super.noSuchMethod(Invocation.method(#retrieveLostPhoto, [requester]),
              returnValue:
                  Future<_i2.Result<Uri, _i61.PlatformException>?>.value())
          as _i10.Future<_i2.Result<Uri, _i61.PlatformException>?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ProductsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsManager extends _i1.Mock implements _i62.ProductsManager {
  MockProductsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Result<_i63.Product?, _i64.ProductsManagerError>> getProduct(
          String? barcodeRaw, List<_i24.LangCode>? langsPrioritized) =>
      (super.noSuchMethod(
          Invocation.method(#getProduct, [barcodeRaw, langsPrioritized]),
          returnValue: Future<
                  _i2.Result<_i63.Product?, _i64.ProductsManagerError>>.value(
              _FakeResult_0<_i63.Product?, _i64.ProductsManagerError>())) as _i10
          .Future<_i2.Result<_i63.Product?, _i64.ProductsManagerError>>);
  @override
  _i10.Future<_i2.Result<_i63.Product?, _i64.ProductsManagerError>> inflate(
          _i65.BackendProduct? backendProduct,
          List<_i24.LangCode>? langsPrioritized) =>
      (super.noSuchMethod(
          Invocation.method(#inflate, [backendProduct, langsPrioritized]),
          returnValue: Future<
                  _i2.Result<_i63.Product?, _i64.ProductsManagerError>>.value(
              _FakeResult_0<_i63.Product?, _i64.ProductsManagerError>())) as _i10
          .Future<_i2.Result<_i63.Product?, _i64.ProductsManagerError>>);
  @override
  _i10.Future<
      _i2.Result<List<_i63.Product>, _i64.ProductsManagerError>> getProducts(
          List<String>? barcodesRaw, List<_i24.LangCode>? langsPrioritized) =>
      (super.noSuchMethod(
          Invocation.method(#getProducts, [barcodesRaw, langsPrioritized]),
          returnValue:
              Future<_i2.Result<List<_i63.Product>, _i64.ProductsManagerError>>.value(
                  _FakeResult_0<List<_i63.Product>, _i64.ProductsManagerError>())) as _i10
          .Future<_i2.Result<List<_i63.Product>, _i64.ProductsManagerError>>);
  @override
  _i10.Future<_i2.Result<List<_i63.Product>, _i64.ProductsManagerError>> inflateProducts(
          List<_i65.BackendProduct>? backendProducts,
          List<_i24.LangCode>? langsPrioritized) =>
      (super.noSuchMethod(
          Invocation.method(
              #inflateProducts, [backendProducts, langsPrioritized]),
          returnValue:
              Future<_i2.Result<List<_i63.Product>, _i64.ProductsManagerError>>.value(
                  _FakeResult_0<List<_i63.Product>, _i64.ProductsManagerError>())) as _i10
          .Future<_i2.Result<List<_i63.Product>, _i64.ProductsManagerError>>);
  @override
  _i10.Future<_i2.Result<List<_i63.Product>, _i64.ProductsManagerError>>
      inflateOffProducts(List<_i6.Product>? offProducts,
              List<_i24.LangCode>? langsPrioritized) =>
          (super.noSuchMethod(
              Invocation.method(
                  #inflateOffProducts, [offProducts, langsPrioritized]),
              returnValue:
                  Future<_i2.Result<List<_i63.Product>, _i64.ProductsManagerError>>.value(
                      _FakeResult_0<List<_i63.Product>, _i64.ProductsManagerError>())) as _i10
              .Future<_i2.Result<List<_i63.Product>, _i64.ProductsManagerError>>);
  @override
  _i10.Future<_i2.Result<_i63.Product, _i64.ProductsManagerError>>
      createUpdateProduct(_i63.Product? product) => (super.noSuchMethod(
          Invocation.method(#createUpdateProduct, [product]),
          returnValue: Future<
                  _i2.Result<_i63.Product, _i64.ProductsManagerError>>.value(
              _FakeResult_0<_i63.Product, _i64.ProductsManagerError>())) as _i10
          .Future<_i2.Result<_i63.Product, _i64.ProductsManagerError>>);
  @override
  _i10.Future<_i2.Result<_i62.ProductWithOCRIngredients, _i64.ProductsManagerError>> updateProductAndExtractIngredients(
          _i63.Product? product, _i24.LangCode? ingredientsLangCode) =>
      (super.noSuchMethod(
          Invocation.method(#updateProductAndExtractIngredients,
              [product, ingredientsLangCode]),
          returnValue: Future<_i2.Result<_i62.ProductWithOCRIngredients, _i64.ProductsManagerError>>.value(
              _FakeResult_0<_i62.ProductWithOCRIngredients, _i64.ProductsManagerError>())) as _i10
          .Future<_i2.Result<_i62.ProductWithOCRIngredients, _i64.ProductsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ProductsObtainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsObtainer extends _i1.Mock implements _i66.ProductsObtainer {
  MockProductsObtainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Result<_i63.Product?, _i66.ProductsObtainerError>> getProduct(
          String? barcode) =>
      (super.noSuchMethod(Invocation.method(#getProduct, [barcode]),
          returnValue: Future<
                  _i2.Result<_i63.Product?, _i66.ProductsObtainerError>>.value(
              _FakeResult_0<_i63.Product?, _i66.ProductsObtainerError>())) as _i10
          .Future<_i2.Result<_i63.Product?, _i66.ProductsObtainerError>>);
  @override
  _i10.Future<_i2.Result<_i63.Product?, _i66.ProductsObtainerError>> inflate(
          _i65.BackendProduct? backendProduct) =>
      (super.noSuchMethod(Invocation.method(#inflate, [backendProduct]),
          returnValue: Future<
                  _i2.Result<_i63.Product?, _i66.ProductsObtainerError>>.value(
              _FakeResult_0<_i63.Product?, _i66.ProductsObtainerError>())) as _i10
          .Future<_i2.Result<_i63.Product?, _i66.ProductsObtainerError>>);
  @override
  _i10.Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>>
      getProducts(List<String>? barcodes) => (super.noSuchMethod(
          Invocation.method(#getProducts, [barcodes]),
          returnValue:
              Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>>.value(
                  _FakeResult_0<List<_i63.Product>,
                      _i66.ProductsObtainerError>())) as _i10
          .Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>>);
  @override
  _i10.Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>> inflateProducts(
          List<_i65.BackendProduct>? backendProducts) =>
      (super.noSuchMethod(
          Invocation.method(#inflateProducts, [backendProducts]),
          returnValue:
              Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>>.value(
                  _FakeResult_0<List<_i63.Product>,
                      _i66.ProductsObtainerError>())) as _i10
          .Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>>);
  @override
  _i10.Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>>
      inflateOffProducts(List<_i6.Product>? offProducts) => (super.noSuchMethod(
          Invocation.method(#inflateOffProducts, [offProducts]),
          returnValue: Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>>.value(
              _FakeResult_0<List<_i63.Product>,
                  _i66.ProductsObtainerError>())) as _i10
          .Future<_i2.Result<List<_i63.Product>, _i66.ProductsObtainerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RoadsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoadsManager extends _i1.Mock implements _i67.RoadsManager {
  MockRoadsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Result<List<_i53.OsmRoad>, _i67.RoadsManagerError>>
      fetchRoadsWithinAndNearby(_i30.CoordsBounds? bounds) => (super.noSuchMethod(
          Invocation.method(#fetchRoadsWithinAndNearby, [bounds]),
          returnValue: Future<
                  _i2.Result<List<_i53.OsmRoad>, _i67.RoadsManagerError>>.value(
              _FakeResult_0<List<_i53.OsmRoad>, _i67.RoadsManagerError>())) as _i10
          .Future<_i2.Result<List<_i53.OsmRoad>, _i67.RoadsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RouteObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteObserver<R extends _i57.Route<dynamic>> extends _i1.Mock
    implements _i57.RouteObserver<R> {
  MockRouteObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void subscribe(_i57.RouteAware? routeAware, R? route) =>
      super.noSuchMethod(Invocation.method(#subscribe, [routeAware, route]),
          returnValueForMissingStub: null);
  @override
  void unsubscribe(_i57.RouteAware? routeAware) =>
      super.noSuchMethod(Invocation.method(#unsubscribe, [routeAware]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i57.Route<dynamic>? route, _i57.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPush(
          _i57.Route<dynamic>? route, _i57.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i57.Route<dynamic>? route, _i57.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i57.Route<dynamic>? newRoute, _i57.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i57.Route<dynamic>? route, _i57.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ShopsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManager extends _i1.Mock implements _i68.ShopsManager {
  MockShopsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get loadedAreasCount =>
      (super.noSuchMethod(Invocation.getter(#loadedAreasCount), returnValue: 0)
          as int);
  @override
  _i10.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void addListener(_i69.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i69.ShopsManagerListener? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<Map<_i27.OsmUID, List<String>>> getBarcodesWithin(
          _i30.CoordsBounds? bounds) =>
      (super.noSuchMethod(Invocation.method(#getBarcodesWithin, [bounds]),
              returnValue: Future<Map<_i27.OsmUID, List<String>>>.value(
                  <_i27.OsmUID, List<String>>{}))
          as _i10.Future<Map<_i27.OsmUID, List<String>>>);
  @override
  _i10.Future<Map<_i27.OsmUID, List<String>>> getBarcodesCacheFor(
          Iterable<_i27.OsmUID>? uids) =>
      (super.noSuchMethod(Invocation.method(#getBarcodesCacheFor, [uids]),
              returnValue: Future<Map<_i27.OsmUID, List<String>>>.value(
                  <_i27.OsmUID, List<String>>{}))
          as _i10.Future<Map<_i27.OsmUID, List<String>>>);
  @override
  _i10.Future<Map<_i27.OsmUID, _i13.Shop>> getCachedShopsFor(
          Iterable<_i27.OsmUID>? uids) =>
      (super.noSuchMethod(Invocation.method(#getCachedShopsFor, [uids]),
              returnValue: Future<Map<_i27.OsmUID, _i13.Shop>>.value(
                  <_i27.OsmUID, _i13.Shop>{}))
          as _i10.Future<Map<_i27.OsmUID, _i13.Shop>>);
  @override
  _i10.Future<bool> osmShopsCacheExistFor(_i30.CoordsBounds? bounds) =>
      (super.noSuchMethod(Invocation.method(#osmShopsCacheExistFor, [bounds]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<_i2.Result<Map<_i27.OsmUID, _i13.Shop>, _i69.ShopsManagerError>>
      fetchShops(_i30.CoordsBounds? bounds) =>
          (super.noSuchMethod(Invocation.method(#fetchShops, [bounds]),
              returnValue:
                  Future<_i2.Result<Map<_i27.OsmUID, _i13.Shop>, _i69.ShopsManagerError>>.value(
                      _FakeResult_0<Map<_i27.OsmUID, _i13.Shop>,
                          _i69.ShopsManagerError>())) as _i10
              .Future<_i2.Result<Map<_i27.OsmUID, _i13.Shop>, _i69.ShopsManagerError>>);
  @override
  _i10.Future<_i2.Result<Map<_i27.OsmUID, _i13.Shop>, _i69.ShopsManagerError>>
      inflateOsmShops(Iterable<_i52.OsmShop>? shops) =>
          (super.noSuchMethod(Invocation.method(#inflateOsmShops, [shops]),
              returnValue:
                  Future<_i2.Result<Map<_i27.OsmUID, _i13.Shop>, _i69.ShopsManagerError>>.value(
                      _FakeResult_0<Map<_i27.OsmUID, _i13.Shop>,
                          _i69.ShopsManagerError>())) as _i10
              .Future<_i2.Result<Map<_i27.OsmUID, _i13.Shop>, _i69.ShopsManagerError>>);
  @override
  _i10.Future<_i2.Result<_i70.ShopProductRange, _i69.ShopsManagerError>>
      fetchShopProductRange(_i13.Shop? shop, {bool? noCache = false}) => (super
          .noSuchMethod(
              Invocation.method(
                  #fetchShopProductRange, [shop], {#noCache: noCache}),
              returnValue:
                  Future<_i2.Result<_i70.ShopProductRange, _i69.ShopsManagerError>>.value(
                      _FakeResult_0<_i70.ShopProductRange, _i69.ShopsManagerError>())) as _i10
          .Future<_i2.Result<_i70.ShopProductRange, _i69.ShopsManagerError>>);
  @override
  _i10.Future<_i2.Result<_i2.None, _i69.ShopsManagerError>> putProductToShops(
          _i63.Product? product,
          List<_i13.Shop>? shops,
          _i32.ProductAtShopSource? source) =>
      (super.noSuchMethod(
              Invocation.method(#putProductToShops, [product, shops, source]),
              returnValue:
                  Future<_i2.Result<_i2.None, _i69.ShopsManagerError>>.value(
                      _FakeResult_0<_i2.None, _i69.ShopsManagerError>()))
          as _i10.Future<_i2.Result<_i2.None, _i69.ShopsManagerError>>);
  @override
  _i10.Future<_i2.Result<_i13.Shop, _i69.ShopsManagerError>> createShop(
          {String? name, _i15.Coord? coord, _i71.ShopType? type}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createShop, [], {#name: name, #coord: coord, #type: type}),
              returnValue:
                  Future<_i2.Result<_i13.Shop, _i69.ShopsManagerError>>.value(
                      _FakeResult_0<_i13.Shop, _i69.ShopsManagerError>()))
          as _i10.Future<_i2.Result<_i13.Shop, _i69.ShopsManagerError>>);
  @override
  _i10.Future<_i2.Result<_i31.ProductPresenceVoteResult, _i69.ShopsManagerError>>
      productPresenceVote(_i63.Product? product, _i13.Shop? shop, bool? positive) =>
          (super.noSuchMethod(
              Invocation.method(
                  #productPresenceVote, [product, shop, positive]),
              returnValue:
                  Future<_i2.Result<_i31.ProductPresenceVoteResult, _i69.ShopsManagerError>>.value(
                      _FakeResult_0<_i31.ProductPresenceVoteResult, _i69.ShopsManagerError>())) as _i10
              .Future<_i2.Result<_i31.ProductPresenceVoteResult, _i69.ShopsManagerError>>);
  @override
  _i10.Future<void> clearCache() => (super.noSuchMethod(
      Invocation.method(#clearCache, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ShopsManagerListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockShopsManagerListener extends _i1.Mock
    implements _i69.ShopsManagerListener {
  MockShopsManagerListener() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onLocalShopsChange() =>
      super.noSuchMethod(Invocation.method(#onLocalShopsChange, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SuggestedProductsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSuggestedProductsManager extends _i1.Mock
    implements _i72.SuggestedProductsManager {
  MockSuggestedProductsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Stream<_i2.Result<_i73.SuggestionsForShop, _i72.SuggestedProductsManagerError>>
      getSuggestedBarcodes(Iterable<_i13.Shop>? shops, _i15.Coord? center,
              String? countryCode, {Set<_i74.SuggestionType>? types}) =>
          (super.noSuchMethod(
                  Invocation.method(#getSuggestedBarcodes,
                      [shops, center, countryCode], {#types: types}),
                  returnValue: Stream<_i2.Result<_i73.SuggestionsForShop, _i72.SuggestedProductsManagerError>>.empty())
              as _i10.Stream<_i2.Result<_i73.SuggestionsForShop, _i72.SuggestedProductsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SysLangCodeHolder].
///
/// See the documentation for Mockito's code generation for more information.
class MockSysLangCodeHolder extends _i1.Mock implements _i75.SysLangCodeHolder {
  MockSysLangCodeHolder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get langCode =>
      (super.noSuchMethod(Invocation.getter(#langCode), returnValue: '')
          as String);
  @override
  set langCode(String? value) =>
      super.noSuchMethod(Invocation.setter(#langCode, value),
          returnValueForMissingStub: null);
  @override
  _i10.Future<String> get langCodeInited =>
      (super.noSuchMethod(Invocation.getter(#langCodeInited),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  void callWhenInited(_i34.ArgCallback<String>? callback) =>
      super.noSuchMethod(Invocation.method(#callWhenInited, [callback]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserLangsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLangsManager extends _i1.Mock implements _i76.UserLangsManager {
  MockUserLangsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> get initFuture =>
      (super.noSuchMethod(Invocation.getter(#initFuture),
          returnValue: Future<void>.value()) as _i10.Future<void>);
  @override
  void addObserver(_i76.UserLangsManagerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i76.UserLangsManagerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i8.UserLangs> getUserLangs() =>
      (super.noSuchMethod(Invocation.method(#getUserLangs, []),
              returnValue: Future<_i8.UserLangs>.value(_FakeUserLangs_8()))
          as _i10.Future<_i8.UserLangs>);
  @override
  _i10.Future<_i2.Result<_i19.UserParams, _i77.UserLangsManagerError>>
      setManualUserLangs(List<_i24.LangCode>? userLangs) => (super.noSuchMethod(
          Invocation.method(#setManualUserLangs, [userLangs]),
          returnValue:
              Future<_i2.Result<_i19.UserParams, _i77.UserLangsManagerError>>.value(
                  _FakeResult_0<_i19.UserParams,
                      _i77.UserLangsManagerError>())) as _i10
          .Future<_i2.Result<_i19.UserParams, _i77.UserLangsManagerError>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserLangsManagerObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLangsManagerObserver extends _i1.Mock
    implements _i76.UserLangsManagerObserver {
  MockUserLangsManagerObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void onUserLangsChange(_i8.UserLangs? userLangs) =>
      super.noSuchMethod(Invocation.method(#onUserLangsChange, [userLangs]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserParamsController].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserParamsController extends _i1.Mock
    implements _i78.UserParamsController {
  MockUserParamsController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addObserver(_i78.UserParamsControllerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#addObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  void removeObserver(_i78.UserParamsControllerObserver? observer) =>
      super.noSuchMethod(Invocation.method(#removeObserver, [observer]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i19.UserParams?> getUserParams() =>
      (super.noSuchMethod(Invocation.method(#getUserParams, []),
              returnValue: Future<_i19.UserParams?>.value())
          as _i10.Future<_i19.UserParams?>);
  @override
  _i10.Future<void> setUserParams(_i19.UserParams? userParams) =>
      (super.noSuchMethod(Invocation.method(#setUserParams, [userParams]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ViewedProductsStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockViewedProductsStorage extends _i1.Mock
    implements _i79.ViewedProductsStorage {
  MockViewedProductsStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get storageFileName =>
      (super.noSuchMethod(Invocation.getter(#storageFileName), returnValue: '')
          as String);
  @override
  _i10.Stream<void> updates() =>
      (super.noSuchMethod(Invocation.method(#updates, []),
          returnValue: Stream<void>.empty()) as _i10.Stream<void>);
  @override
  _i10.Future<void> loadPersistentProductsForTesting() => (super.noSuchMethod(
      Invocation.method(#loadPersistentProductsForTesting, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  List<_i63.Product> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
          returnValue: <_i63.Product>[]) as List<_i63.Product>);
  @override
  _i10.Future<void> addProduct(_i63.Product? product) => (super.noSuchMethod(
      Invocation.method(#addProduct, [product]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> purgeForTesting() => (super.noSuchMethod(
      Invocation.method(#purgeForTesting, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i57.NavigatorObserver {
  @override
  void didPush(
          _i57.Route<dynamic>? route, _i57.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i57.Route<dynamic>? route, _i57.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i57.Route<dynamic>? route, _i57.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i57.Route<dynamic>? newRoute, _i57.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i57.Route<dynamic>? route, _i57.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
