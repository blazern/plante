// Mocks generated by Mockito 5.4.4 from annotations
// in plante/test/lang/user_langs_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:plante/base/result.dart' as _i2;
import 'package:plante/lang/location_based_user_langs_manager.dart' as _i3;
import 'package:plante/lang/manual_user_langs_manager.dart' as _i6;
import 'package:plante/lang/user_langs_manager_error.dart' as _i8;
import 'package:plante/model/lang_code.dart' as _i5;
import 'package:plante/model/user_params.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<OK, ERR> extends _i1.SmartFake
    implements _i2.Result<OK, ERR> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationBasedUserLangsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationBasedUserLangsManager extends _i1.Mock
    implements _i3.LocationBasedUserLangsManager {
  MockLocationBasedUserLangsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> get initFuture => (super.noSuchMethod(
        Invocation.getter(#initFuture),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.LangCode>?> getUserLangs() => (super.noSuchMethod(
        Invocation.method(
          #getUserLangs,
          [],
        ),
        returnValue: _i4.Future<List<_i5.LangCode>?>.value(),
      ) as _i4.Future<List<_i5.LangCode>?>);
}

/// A class which mocks [ManualUserLangsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockManualUserLangsManager extends _i1.Mock
    implements _i6.ManualUserLangsManager {
  MockManualUserLangsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> get initFuture => (super.noSuchMethod(
        Invocation.getter(#initFuture),
        returnValue: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onUserParamsUpdate(_i7.UserParams? userParams) => super.noSuchMethod(
        Invocation.method(
          #onUserParamsUpdate,
          [userParams],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i5.LangCode>?> getUserLangs() => (super.noSuchMethod(
        Invocation.method(
          #getUserLangs,
          [],
        ),
        returnValue: _i4.Future<List<_i5.LangCode>?>.value(),
      ) as _i4.Future<List<_i5.LangCode>?>);

  @override
  _i4.Future<
      _i2.Result<_i7.UserParams, _i8.UserLangsManagerError>> setUserLangs(
          List<_i5.LangCode>? langs) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserLangs,
          [langs],
        ),
        returnValue: _i4.Future<
                _i2.Result<_i7.UserParams, _i8.UserLangsManagerError>>.value(
            _FakeResult_0<_i7.UserParams, _i8.UserLangsManagerError>(
          this,
          Invocation.method(
            #setUserLangs,
            [langs],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i7.UserParams, _i8.UserLangsManagerError>>);
}
